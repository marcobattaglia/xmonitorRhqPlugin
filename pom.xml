<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.rhq</groupId>
		<artifactId>rhq-plugins-parent</artifactId>
		<version>4.10.0-SNAPSHOT</version>
	</parent>

	<groupId>org.jboss.on</groupId>
	<artifactId>rhq-plugin-cunstom-xmonitor</artifactId>
	<packaging>jar</packaging>

	<name>RHQ Xmonitor Plugin</name>
	<description>A plugin for managing calculated metric on JBoss</description>

	<dependencies>
		<dependency>
			<groupId>org.rhq</groupId>
			<artifactId>rhq-jboss-as-7-plugin</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>${rhq.groupId}</groupId>
			<artifactId>rhq-jmx-plugin</artifactId>
			<version>${project.version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-module-testng</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-api-mockito</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-all</artifactId>
			<version>2.1.5</version>
		</dependency>

	</dependencies>

	<profiles>

		<profile>
			<id>integration-tests</id>
			<activation>
				<property>
					<name>maven.test.skip</name>
					<value>!true</value>
				</property>
			</activation>

			<build>
				<plugins>
					<!-- <plugin> -->
					<!-- <artifactId>maven-assembly-plugin</artifactId> -->
					<!-- <configuration> -->
					<!-- <archive> -->
					<!-- <manifest> -->

					<!-- </manifest> -->
					<!-- </archive> -->
					<!-- <descriptors> -->
					<!-- <descriptor>src/main/assembly/assembly.xml</descriptor> -->
					<!-- </descriptors> -->
					<!-- </configuration> -->
					<!-- <executions> -->
					<!-- <execution> -->
					<!-- <id>make-assembly</id> this is used for inheritance merges -->
					<!-- <phase>package</phase> bind to the packaging phase -->
					<!-- <goals> -->
					<!-- <goal>single</goal> -->
					<!-- </goals> -->
					<!-- </execution> -->
					<!-- </executions> -->
					<!-- </plugin> -->
<!-- 					<plugin> -->
<!-- 						<groupId>org.apache.maven.plugins</groupId> -->
<!-- 						<artifactId>maven-dependency-plugin</artifactId> -->
<!-- 						<version>2.8</version> -->
<!-- 						<configuration> -->
<!-- 							<artifactItems> -->
<!-- 								<artifactItem> -->
<!-- 									<groupId>org.codehaus.groovy</groupId> -->
<!-- 									<artifactId>groovy-all</artifactId> -->
<!-- 									<version>2.1.5</version> -->
<!-- 									<type>jar</type> -->
<!-- 									<overWrite>true</overWrite> -->
<!-- 									<outputDirectory>/</outputDirectory> -->
									
<!-- 								</artifactItem> -->
<!-- 							</artifactItems> -->
<!-- 							other configurations here -->
<!-- 						</configuration> -->
<!-- 					</plugin> -->
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<phase>pre-integration-test</phase>
								<configuration>
									<target>
										<echo>Setting up plugin dependencies...</echo>
										<property name="settings.localRepository" location="${user.home}/.m2/repository" />
										<mkdir dir="target/itest" />
										<mkdir dir="target/itest/plugins" />
										<mkdir dir="target/itest/lib" />
										<copy toDir="target/itest/plugins" flatten="true">
											<fileset dir="${settings.localRepository}/">
												<include
													name="org/rhq/rhq-platform-plugin/${project.version}/rhq-platform-plugin-${project.version}.jar" />
												<include
													name="org/rhq/rhq-jmx-plugin/${project.version}/rhq-jmx-plugin-${project.version}.jar" />
											</fileset>
											<fileset dir="${project.build.directory}">
												<include name="${project.artifactId}-${project.version}.jar" />
											</fileset>
										</copy>
										<unzip dest="target/itest/lib">
											<fileset
												dir="${settings.localRepository}/org/hyperic/sigar-dist/${sigar.version}"
												includes="*.zip" />
											<patternset>
												<include name="**/lib/sigar.jar" />
												<include name="**/lib/bcel*.jar" />
												<include name="**/lib/*.so" />
												<include name="**/lib/*.sl" />
												<include name="**/lib/*.dll" />
												<include name="**/lib/*.dylib" />
											</patternset>
										</unzip>
										<move todir="target/itest/lib" flatten="true">
											<fileset dir="target/itest/lib">
												<include name="**/lib/*" />
											</fileset>
										</move>
										<delete dir="target/itest/lib/hyperic-sigar-${sigar.version}" />
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skip>true</skip>
						</configuration>
						<executions>
							<execution>
								<id>surefire-it</id>
								<phase>integration-test</phase>
								<goals>
									<goal>test</goal>
								</goals>
								<configuration>
									<skip>${maven.test.skip}</skip>
									<excludedGroups>${rhq.testng.excludedGroups}</excludedGroups>
									<useSystemClassLoader>true</useSystemClassLoader>
									<argLine>${jacoco.integration-test.args}
										-Dorg.hyperic.sigar.path=${basedir}/target/itest/lib</argLine>
									<!--<argLine>${jacoco.integration-test.args} -Dorg.hyperic.sigar.path=${basedir}/target/itest/lib 
										-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y</argLine> -->
									<systemProperties>
										<property>
											<name>project.artifactId</name>
											<value>${project.artifactId}</value>
										</property>
										<property>
											<name>project.version</name>
											<value>${project.version}</value>
										</property>
									</systemProperties>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>

		<profile>
			<id>dev</id>

			<properties>
				<rhq.rootDir>../../..</rhq.rootDir>
				<rhq.containerDir>${rhq.rootDir}/${rhq.devContainerServerPath}</rhq.containerDir>
				<rhq.deploymentDir>${rhq.containerDir}/${rhq.agentPluginDir}</rhq.deploymentDir>
			</properties>

			<build>
				<plugins>

					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>

							<execution>
								<id>deploy</id>
								<phase>compile</phase>
								<configuration>
									<target>
										<mkdir dir="${rhq.deploymentDir}" />
										<property name="deployment.file"
											location="${rhq.deploymentDir}/${project.build.finalName}.jar" />
										<echo>*** Updating ${deployment.file}...</echo>
										<jar destfile="${deployment.file}" basedir="${project.build.outputDirectory}" />
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
							
							<execution>
								<id>deploy-jar-meta-inf</id>
								<phase>package</phase>
								<configuration>
									<target>
										<property name="deployment.file"
											location="${rhq.deploymentDir}/${project.build.finalName}.jar" />
										<echo>*** Updating META-INF dir in ${deployment.file}...</echo>
										<unjar
											src="${project.build.directory}/${project.build.finalName}.jar"
											dest="${project.build.outputDirectory}">
											<patternset>
												<include name="META-INF/**" />
											</patternset>
										</unjar>
										<jar destfile="${deployment.file}"
											manifest="${project.build.outputDirectory}/META-INF/MANIFEST.MF"
											update="true">
										</jar>
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
							
							<execution>
								<id>undeploy</id>
								<phase>clean</phase>
								<configuration>
									<target>
										<property name="deployment.file"
											location="${rhq.deploymentDir}/${project.build.finalName}.jar" />
										<echo>*** Deleting ${deployment.file}...</echo>
										<delete file="${deployment.file}" />
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>

						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>
	</profiles>
</project>
